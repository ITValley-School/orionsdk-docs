<!-- Wappler include head-page="layouts/main-jesusgraph" fontawesome_5="cdn" bootstrap5="local" is="dmx-app" id="Iniciojesusgraph" appConnect="local" -->
<meta name="ac:route" content="/jesusgraph/Inicio-jesusgraph">

<head>
    <!-- Highlight.js para c√≥digo colorido -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <script>
        hljs.highlightAll();
    </script>
</head>

<div class="container py-4">
    <div class="mb-5 text-center">
        <h1 class="fw-bold display-5">JesusGraph: Um Orquestrador Inspirado por Prop√≥sito</h1>
        <p class="text-muted fs-5">Um framework open source que transforma dados em b√™n√ß√£os.</p>
    </div>

    <div class="mb-4">
        <p>
            <center><img src="/assets/img/branding/ChatGPT%20Image%2019%20avr.%202025,%2022%20h%2006%20min%2010%20s.png" width="400" height="400" alt="JesusGraph"></center>
        </p>
        <p>JesusGraph √© um orquestrador de execu√ß√£o baseado em grafos, projetado para ser simples, expans√≠vel e com c√≥digo-fonte aberto. Seu diferencial est√° na sua alma: o estado compartilhado entre as fun√ß√µes √© chamado de <strong>Blessing</strong>, simbolizando que cada etapa do fluxo recebe e entrega uma "ben√ß√£o" para o pr√≥ximo n√≥.</p>
        <p>Inspirado na teoria dos grafos, o JesusGraph conecta fun√ß√µes (<em>n√≥s</em>) por meio de caminhos definidos (<em>arestas</em>), onde cada fun√ß√£o executa uma tarefa e passa um estado enriquecido para frente.</p>
        <p>√â ideal para orquestrar:</p>
        <ul>
            <li>Agentes de IA</li>
            <li>Fluxos de processamento de dados</li>
            <li>Pipelines de neg√≥cios</li>
            <li>Processos humanos interativos</li>
        </ul>
    </div>

    <div class="mb-4">
        <h3 class="fw-semibold">üåä Por que usar o JesusGraph?</h3>
        <ul>
            <li><strong>‚ú® Simplicidade:</strong> Estrutura clara baseada em n√≥s e estados</li>
            <li><strong>‚ú® Humanidade:</strong> O estado √© chamado de "Blessing", pois cada fun√ß√£o √© aben√ßoada por dados vindos da anterior</li>
            <li><strong>‚ú® Extens√≠vel:</strong> Adicione n√≥s, fun√ß√µes, entradas humanas, l√≥gica de pausa e muito mais</li>
            <li><strong>‚ú® Observ√°vel:</strong> Cada passo deixa um hist√≥rico e pode ser auditado</li>
            <li><strong>‚ú® Sem depend√™ncias externas:</strong> Apenas Python puro</li>
        </ul>
    </div>

    <div class="mb-4">
        <h3 class="fw-semibold">üöÄ Exemplo de uso</h3>
        <pre><code class="language-python">
from jesusgraph.core.graph import JesusGraphCore
from jesusgraph.core.blessingstate import BlessingState

def exemplo(blessing: BlessingState) -> BlessingState:
    blessing.addBlessing("mensagem", "Shalom!")
    return blessing

graph = JesusGraphCore()
graph.add_node("inicio", exemplo)
graph.set_entry_node("inicio")
graph.set_end_node("inicio")
resultado = graph.run()
print(resultado.get("mensagem"))  # Shalom!
    </code></pre>
    </div>

    <div class="mb-4">
        <h3 class="fw-semibold">üîç Conceitos Fundamentais</h3>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Conceito</th>
                    <th>Descri√ß√£o</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>BlessingState</td>
                    <td>Objeto de estado compartilhado entre os n√≥s</td>
                </tr>
                <tr>
                    <td>JesusGraphCore</td>
                    <td>Classe principal do orquestrador de grafos</td>
                </tr>
                <tr>
                    <td>add_node</td>
                    <td>Registra uma fun√ß√£o como n√≥</td>
                </tr>
                <tr>
                    <td>add_edge</td>
                    <td>Conecta n√≥s sequencialmente</td>
                </tr>
                <tr>
                    <td>set_entry_node / set_end_node</td>
                    <td>Define onde o fluxo inicia e termina</td>
                </tr>
                <tr>
                    <td>run</td>
                    <td>Executa o grafo</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="mb-4">
        <h3 class="fw-semibold">üöß Componentes do JesusGraph</h3>
        <ul>
            <li><strong>BlessingState:</strong> Cont√™iner do estado com m√©todos <code>addBlessing</code>, <code>getBlessing</code>, <code>updateBlessing</code> e <code>mergeBlessings</code></li>
            <li><strong>JesusGraphCore:</strong> Respons√°vel por conectar e orquestrar os n√≥s do grafo</li>
            <li><strong>ExecutionState:</strong> (Interno) Armazena metadados como hist√≥rico de n√≥s, pausas, erros e timestamps</li>
        </ul>
    </div>

    <div class="mb-4">
        <h3 class="fw-semibold">üöú Quando usar</h3>
        <ul>
            <li>Cria√ß√£o de assistentes baseados em m√∫ltiplas etapas</li>
            <li>Workflows de aprova√ß√£o com pausas humanas</li>
            <li>Integra√ß√£o entre servi√ßos com l√≥gicas diferentes</li>
            <li>Automa√ß√£o de processos de atendimento e decis√£o</li>
        </ul>
    </div>

    <div class="mb-4">
        <h3 class="fw-semibold">üåà Filosofia</h3>
        <p>JesusGraph n√£o √© apenas um framework t√©cnico.</p>
        <p>Ele √© um lembrete de que cada peda√ßo de informa√ß√£o pode ser uma b√™n√ß√£o se tratado com intencionalidade. Cada fun√ß√£o recebe algo, melhora esse algo e entrega com mais valor ao pr√≥ximo.</p>
    </div>

    <div class="text-center mt-5">
        <h4 class="fw-semibold">üåü Pr√≥ximo passo</h4>
        <p class="fs-5">Vamos para o <strong>Guia R√°pido</strong> e come√ßar a usar o JesusGraph na pr√°tica.</p>
        <p class="text-muted">‚úÖ Open Source - <a href="https://github.com/itvalley/jesusgraph" target="_blank">github.com/itvalley/jesusgraph</a></p>
    </div>
</div>